// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WalletApiClient is the client API for WalletApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletApiClient interface {
	CallApi(ctx context.Context, in *ApiParameters, opts ...grpc.CallOption) (*Message, error)
}

type walletApiClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletApiClient(cc grpc.ClientConnInterface) WalletApiClient {
	return &walletApiClient{cc}
}

func (c *walletApiClient) CallApi(ctx context.Context, in *ApiParameters, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/proto.WalletApi/CallApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletApiServer is the server API for WalletApi service.
// All implementations must embed UnimplementedWalletApiServer
// for forward compatibility
type WalletApiServer interface {
	CallApi(context.Context, *ApiParameters) (*Message, error)
	mustEmbedUnimplementedWalletApiServer()
}

// UnimplementedWalletApiServer must be embedded to have forward compatible implementations.
type UnimplementedWalletApiServer struct {
}

func (UnimplementedWalletApiServer) CallApi(context.Context, *ApiParameters) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallApi not implemented")
}
func (UnimplementedWalletApiServer) mustEmbedUnimplementedWalletApiServer() {}

// UnsafeWalletApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletApiServer will
// result in compilation errors.
type UnsafeWalletApiServer interface {
	mustEmbedUnimplementedWalletApiServer()
}

func RegisterWalletApiServer(s grpc.ServiceRegistrar, srv WalletApiServer) {
	s.RegisterService(&WalletApi_ServiceDesc, srv)
}

func _WalletApi_CallApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletApiServer).CallApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WalletApi/CallApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletApiServer).CallApi(ctx, req.(*ApiParameters))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletApi_ServiceDesc is the grpc.ServiceDesc for WalletApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WalletApi",
	HandlerType: (*WalletApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallApi",
			Handler:    _WalletApi_CallApi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/wallet.proto",
}
